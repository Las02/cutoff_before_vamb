import subprocess

#### SETTINGS ####
# TARGET_PARAMETER = [500, 1000, 1500, 2000]
TARGET_PARAMETER = [2000]
PARAMETER_NAME = 'para' 
# SAMPLES =  ['Airways', 'Gastrointestinal', 'Skin', 'Urogenital', 'Oral'] # ['errorfree', 'sludge', 'human_longread'
SAMPLES =  ['A']
# SAMPLES =  ['A']
SAMPLE_DATA_PATH = '../../sample_data/'
IN_LOOP_SNAKEFILE = './in_loop_snakefile.py'
TIMES_RUN_VAMB =1 


#### CODE ####
TIMES_RUN_VAMB_LIST = list(range(1, TIMES_RUN_VAMB + 1)) # list for expand in rule all input and run_inloop output


# print(expand('{sample}/para_{target_parameter}/{times_run_vamb}_vamb/vae_clusters.tsv', target_parameter = TARGET_PARAMETER, sample = SAMPLES, times_run_vamb = TIMES_RUN_VAMB_LIST))


rule all:
    input:
         directory(expand('{sample}/para_{target_parameter}/{times_run_vamb}_vamb', target_parameter = TARGET_PARAMETER, sample = SAMPLES, times_run_vamb = TIMES_RUN_VAMB_LIST))
    
rule run_inloop:
    output: 
        directory(expand('{{sample}}/para_{{target_parameter}}/{times_run_vamb}_vamb', times_run_vamb = TIMES_RUN_VAMB_LIST))
    params:
        parameter = PARAMETER_NAME + '_{target_parameter}',
        config_path = SAMPLE_DATA_PATH,
        in_loop_snakefile = IN_LOOP_SNAKEFILE,
        times_run_vamb = TIMES_RUN_VAMB
    # envmodules:
        # 'snakemake/7.28.2'
    conda: 
        'snakemake'
    benchmark: 'benchmark/{sample}_{target_parameter}'
    shell:
        'mkdir  {wildcards.sample}/{params.parameter} -p;'
        # 'source activate snakemake;'
        # 'bash ./workflow/condainit;'
        # 'conda activate snakemake;'
        ##########################
        'snakemake -c4 -d {wildcards.sample}/{params.parameter} --snakefile {params.in_loop_snakefile} ' 
        '--config min_contig_size={wildcards.target_parameter} ' 
        'config_path={params.config_path} '
        'sample={wildcards.sample} '
        'times_run_vamb={params.times_run_vamb} '
        '--use-envmodules --use-conda '
        '-F '
        # '-R run_avamb '
        '--nolock '
        # '-np '
        # '--touch ' 
        '2> snake_out/error/{wildcards.sample}_{params.parameter}_snakemake.e '
        '> snake_out/std/{wildcards.sample}_{params.parameter}_snakemake.o '
        ####################################
        # '--rerun-incomplete'
         # '2> output/{wildcards.sample}_{params.parameter}_snakemake.e '
         # '> output/{wildcards.sample}_{params.parameter}_snakemake.o '



         


         

